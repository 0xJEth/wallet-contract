;; Simple wallet smart contract with plugins

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";
(cell, int) dict_add_builder?(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) "DICTADDB";
(cell, int) dict_delete?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTDEL";
(slice, (int)) ~load_currency(slice s) asm( -> 1 0) "LDVARUINT32";


() recv_internal(cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  if((in_msg.slice_bits() < 32) | (in_msg~load_uint(32) != 0x706c7567)) { ;; "plug" prefix
    ;; ignore all messages without `request subscription` op
    return ();
  }
  slice s_addr = cs~load_msg_addr();
  (int wc, int addr_hash) = parse_std_addr(s_addr);
  var ds = get_data().begin_parse();
  var (unused, plugins) = (ds~load_bits(32 + 32 + 256), ds~load_dict());
  var (v, success?) = plugins.dict_get?( 8 + 256, begin_cell().store_int(wc, 8).store_uint(addr_hash, 256).end_cell().begin_parse());
  throw_unless(40, success?);
  accept_message();
  (int r_toncoins, cell r_extra) = (in_msg~load_grams(), in_msg~load_dict());
  (int m_toncoins, cell m_extra)  = unpair(get_balance());
  int insolvent = m_toncoins < r_toncoins;
  int counter = 0 ;
  ;; do not accept request of more than 16 native currencies
  do {
    (int key, slice value, int found?) = r_extra~udict::delete_get_min(32);
    if(found?) {
      int requested_cur = value~load_currency();
      if (requested_cur) {
        (slice m_value, int found?) = m_extra.udict_get?(32, key);
        if ( found? ) {
          if (m_value~load_currency() < requested_cur ) {
            insolvent = -1;
          }
        } else {
          insolvent = -1;
        }
      }
    }
   counter += 1;
   if (counter > 16) {
    insolvent = -1;
   }
  } until ( r_extra.cell_null?() | insolvent);
  var msg = begin_cell();
  if ( ~ insolvent ) {
   msg = msg
      .store_uint(0x18, 6)
      .store_slice(s_addr)
      .store_grams(r_toncoins)
      .store_dict(r_extra)
      .store_uint(0, 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0x706c7567,32);
  } else {
   msg = msg
      .store_uint(0x18, 6)
      .store_slice(s_addr)
      .store_grams(100000000)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0xf06c7567,32)
      .store_grams(m_toncoins)
      .store_dict(m_extra);
  }
    send_raw_message(msg.end_cell(), 1);
}

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (subwallet_id, valid_until, msg_seqno) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32));
  throw_if(35, valid_until <= now());
  var ds = get_data().begin_parse();
  var (stored_seqno, stored_subwallet, public_key, plugins) = (ds~load_uint(32), ds~load_uint(32), ds~load_uint(256), ds~load_dict());
  ds.end_parse();
  throw_unless(33, msg_seqno == stored_seqno);
  throw_unless(34, subwallet_id == stored_subwallet);
  throw_unless(35, check_signature(slice_hash(in_msg), signature, public_key));
  accept_message();
  cs~touch();
  int op = cs~load_uint(8);
  if (op == 0) { ;; simple send
    while (cs.slice_refs()) {
      var mode = cs~load_uint(8);
      send_raw_message(cs~load_ref(), mode);
    }
  }
  if (op == 1) { ;; deploy and install plugin
    int plugin_workchain = cs~load_int(8);
    int plugin_balance = cs~load_grams();
    (cell state_init, cell body) = (cs~load_ref(), cs~load_ref());
    int plugin_address = cell_hash(state_init);
    slice wc_n_address = begin_cell().store_int(plugin_workchain,8).store_uint(plugin_address,256).end_cell().begin_parse();
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_uint(4,3).store_slice(wc_n_address)
      .store_grams(plugin_balance)
      .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
      .store_ref(state_init)
      .store_ref(body);
    send_raw_message(msg.end_cell(), 1);
    (plugins, int success?) = plugins.dict_add_builder?(8 + 256, wc_n_address, begin_cell());
    throw_unless(39, success?);
  }

  if (op == 2) { ;; install plugin
    slice wc_n_address = cs~load_bits(8 + 256);
    (plugins, int success?) = plugins.dict_add_builder?(8 + 256, wc_n_address, begin_cell());
    throw_unless(39, success?);
    builder msg = begin_cell()
      .store_uint(0x18, 6)
      .store_uint(4,3).store_slice(wc_n_address)
      .store_grams(100000000)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0x6e6f7465, 32);
    send_raw_message(msg.end_cell(), 1);
  }

  if (op == 3) { ;; remove plugin
    slice wc_n_address = cs~load_bits(8 + 256);
    (plugins, int success?) = plugins.dict_delete?(8 + 256, wc_n_address);
    throw_unless(39, success?);
    builder msg = begin_cell()
      .store_uint(0x18, 6)
      .store_uint(4,3).store_slice(wc_n_address)
      .store_grams(100000000)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0xde511201, 32);
    send_raw_message(msg.end_cell(), 1);
  }

  set_data(begin_cell()
    .store_uint(stored_seqno + 1, 32)
    .store_uint(stored_subwallet, 32)
    .store_uint(public_key, 256)
    .store_dict(plugins)
    .end_cell());
}

;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int get_public_key() method_id {
  var cs = get_data().begin_parse();
  cs~load_uint(64);
  return cs.preload_uint(256);
}

int is_plugin_installed(int wc, int addr_hash) method_id {
  var ds = get_data().begin_parse();
  var (unused, plugins) = (ds~load_bits(32 + 32 + 256), ds~load_dict());
  var (v, success?) = plugins.dict_get?( 8 + 256, begin_cell().store_int(wc, 8).store_uint(addr_hash, 256).end_cell().begin_parse());
  return success?;
}

tuple get_plugin_list() method_id {
  var list = null();
  var ds = get_data().begin_parse();
  var (unused, plugins) = (ds~load_bits(32 + 32 + 256), ds~load_dict());
  do {
    var (load_dict, wc_n_address, value, f) = plugins.dict_delete_get_min( 8 + 256 );
    f~touch();
    if (f) {
      (int wc, int addr) = (wc_n_address~load_int(8), wc_n_address~load_uint(256));
      list = cons(pair(wc, addr), list);
    }
  } until (~ f);
  return list;
}

